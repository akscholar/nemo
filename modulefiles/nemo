#%Module1.0###################################################################

module-whatis "
 NEMO Stellar Dynamics Toolbox, particle simulations,
 stellar orbits, image processing and tabular data manipulation.
 Documentation is maintained in the github pages, https://teuben.github.io/nemo
 Ref: https://ui.adsabs.harvard.edu/abs/1995ASPC...77..398T"

# get full pathname for this script file
set scriptpath "${ModulesCurrentModulefile}"

# if modulefile script name is a symlink, resolve it
if { "[file type "$scriptpath"]" eq "link" } {
    set scriptpath "[file readlink "$scriptpath"]"
}


# get directory holding this modulefile script and others
set modulefileroot "[file dirname "$scriptpath"]"

# get name of modulefile script we are loading
set modulefilename "[file tail "$scriptpath"]"

# determine modulefile script version
set modulefilever "[file dirname "$modulefileroot"]"
set modulefilever "[file tail "$modulefilever"]"

# point to component top-level root folder
set componentroot "[file dirname "$modulefileroot"]"
set componentroot "[file dirname "$componentroot"]"

# get component folder name
set componentname "[file tail "$componentroot"]"

# get oneAPI top-level root folder
set oneapiroot "[file dirname "$componentroot"]"



set NEMO "[file dirname $modulefileroot]"



# On load print component name and version being loaded
if { [ module-info mode load ] } {
    puts stderr "Loading $modulefilename version $modulefilever"
    puts stderr "found module NEMO=$NEMO"
}

# On `module unload` print component module name and version being removed
# Include `module list` message only if this modulefile loads dependent modules
if { [ module-info mode ] == "unload" || [ module-info mode ] == "remove" } {
    puts stderr "Removing $modulefilename version $modulefilever"
    puts stderr "Use `module list` to view any remaining dependent modules."
}

# it is better to keep this esoteric tcl code here, and not a nemo_start.tcl
# since the load/unload need to work properly ?

setenv NEMO      "$NEMO"
setenv NEMOLIB   "$NEMO/lib"
setenv NEMOBIN   "$NEMO/bin"
setenv NEMOOBJ   "$NEMO/obj"
setenv NEMODOC   "$NEMO/man/doc"
setenv NEMODAT   "$NEMO/data"
setenv NEMOINC   "$NEMO/inc"
setenv NEMOSRC   "$NEMO/src"
setenv BTRPATH   ".:$NEMO/obj/bodytrans"
setenv POTPATH   ".:$NEMO/obj/potential:$NEMO/obj/acc"
setenv MANIPPATH ".:$NEMO/obj/manip:$NEMO/usr/dehnen/falcON/manip"
setenv NEMOVER   [string trim [read [open $NEMO/VERSION r]]]

setenv NEMOSYS   [ uname sysname ] 
setenv NEMOSITE  [ uname nodename ] 

setenv YAPP "/xs"
# setenv PGPLOT_DIR  "/usr/lib64"

set FALCON "$NEMO/usr/dehnen/falcON"
setenv FALCON     "$FALCON"
setenv FALCONLIB  "$FALCON/lib"
setenv WDUTILSLIB "$FALCON/utils/lib"

# set for both nemo and falcON at the same time
setenv ACCPATH ".:$FALCON/acc/:$NEMO/obj/potential:$NEMO/obj/acc"

prepend-path PATH "$FALCON/bin:$NEMO/bin"

#   NEMO's special anaconda3 ?
if { [ file exist $NEMO/anaconda3 ] } {
    # puts stderr "Also found anaconda3"
    prepend-path PATH $NEMO/anaconda3/bin
}
